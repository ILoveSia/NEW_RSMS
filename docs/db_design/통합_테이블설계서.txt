# 책무구조도 이행관리시스템 - 통합 PostgreSQL 테이블 설계서

## 1. 개요

### 1.1 문서 정보
- **시스템명**: 책무구조도 이행관리시스템
- **데이터베이스**: PostgreSQL 16+
- **작성일**: 2025-09-11
- **목적**: 7개 메뉴별 테이블 통합 및 중복 제거
- **설계 원칙**: 표준화, 정규화, 성능 최적화

### 1.2 통합 결과 요약
- **통합 전**: 7개 모듈, 총 89개 테이블
- **통합 후**: 핵심 35개 테이블
- **중복 제거율**: 60% 이상
- **주요 통합**: 사용자관리, 공통코드, 첨부파일, 이력관리, 결재 시스템

### 1.3 표준화 가이드라인
- **네이밍**: snake_case 소문자 사용
- **데이터 타입**: PostgreSQL 네이티브 타입 활용
- **공통 컬럼**: created_at, updated_at, created_by, updated_by 표준화
- **UUID 사용**: 주요 테이블 PK는 UUID 타입
- **JSONB 활용**: 유연한 데이터 구조 지원

## 2. 핵심 공통 테이블 (Core Common Tables)

### 2.1 사용자 및 조직 관리

#### TB_USERS (사용자 마스터) - 통합
**통합 대상**: TB_USERS, TB_EMPLOYEE, TB_USER_INFO, users

```sql
CREATE TABLE TB_USERS (
    user_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    username VARCHAR(50) UNIQUE NOT NULL,
    employee_no VARCHAR(20) UNIQUE NOT NULL,
    login_id VARCHAR(50) UNIQUE,
    password_hash VARCHAR(255),
    
    -- 기본 정보
    full_name VARCHAR(100) NOT NULL,
    english_name VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20),
    mobile_number VARCHAR(20),
    
    -- 조직 정보
    dept_id UUID REFERENCES TB_DEPARTMENT(dept_id),
    dept_code VARCHAR(20),
    dept_name VARCHAR(100),
    position_id UUID REFERENCES TB_POSITION(position_id),
    position_code VARCHAR(20),
    position_name VARCHAR(100),
    
    -- 인사 정보
    employment_status VARCHAR(20) DEFAULT 'ACTIVE' 
        CHECK (employment_status IN ('ACTIVE', 'INACTIVE', 'RESIGNED', 'RETIRED')),
    employment_type VARCHAR(20) DEFAULT 'REGULAR' 
        CHECK (employment_type IN ('REGULAR', 'CONTRACT', 'TEMP')),
    hire_date DATE,
    resignation_date DATE,
    birth_date DATE,
    
    -- 계정 관리
    account_status VARCHAR(20) DEFAULT 'ACTIVE' 
        CHECK (account_status IN ('ACTIVE', 'LOCKED', 'SUSPENDED')),
    password_change_required BOOLEAN DEFAULT TRUE,
    password_last_changed_at TIMESTAMP WITH TIME ZONE,
    last_login_at TIMESTAMP WITH TIME ZONE,
    failed_login_count INTEGER DEFAULT 0,
    
    -- 권한 및 역할
    is_admin BOOLEAN DEFAULT FALSE,
    is_executive BOOLEAN DEFAULT FALSE,
    auth_level INTEGER DEFAULT 5,
    
    -- 메타데이터
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id)
);

CREATE INDEX idx_users_username ON TB_USERS(username);
CREATE INDEX idx_users_employee_no ON TB_USERS(employee_no);
CREATE INDEX idx_users_dept ON TB_USERS(dept_id, employment_status);
CREATE INDEX idx_users_status ON TB_USERS(employment_status, account_status);
```

#### TB_DEPARTMENT (부서 마스터)

```sql
CREATE TABLE TB_DEPARTMENT (
    dept_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    dept_code VARCHAR(20) UNIQUE NOT NULL,
    dept_name VARCHAR(100) NOT NULL,
    dept_full_name VARCHAR(200),
    parent_dept_id UUID REFERENCES TB_DEPARTMENT(dept_id),
    dept_level INTEGER DEFAULT 1,
    dept_type VARCHAR(20) DEFAULT 'NORMAL' 
        CHECK (dept_type IN ('HQ', 'DEPT', 'TEAM', 'NORMAL')),
    head_employee_id UUID REFERENCES TB_USERS(user_id),
    sort_order INTEGER DEFAULT 999,
    is_active BOOLEAN DEFAULT TRUE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id)
);

CREATE INDEX idx_dept_code ON TB_DEPARTMENT(dept_code);
CREATE INDEX idx_dept_parent ON TB_DEPARTMENT(parent_dept_id);
CREATE INDEX idx_dept_active ON TB_DEPARTMENT(is_active);
```

### 2.2 공통코드 관리 (3계층 구조) - 통합
**통합 대상**: TB_COMMON_CODE, tb_common_code, TB_CODE_MASTER, common_code, code_*

#### TB_CODE_CATEGORY (코드 분류)

```sql
CREATE TABLE TB_CODE_CATEGORY (
    category_code VARCHAR(20) PRIMARY KEY,
    category_name VARCHAR(100) NOT NULL UNIQUE,
    category_desc TEXT,
    category_type VARCHAR(20),
    sort_order INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id)
);
```

#### TB_CODE_GROUP (코드 그룹)

```sql
CREATE TABLE TB_CODE_GROUP (
    group_code VARCHAR(50) PRIMARY KEY,
    group_name VARCHAR(200) NOT NULL,
    group_desc TEXT,
    category_code VARCHAR(20) NOT NULL REFERENCES TB_CODE_CATEGORY(category_code),
    system_code BOOLEAN DEFAULT FALSE,
    editable BOOLEAN DEFAULT TRUE,
    sort_order INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id)
);

CREATE INDEX idx_code_group_category ON TB_CODE_GROUP(category_code, is_active);
```

#### TB_CODE_DETAIL (상세 코드)

```sql
CREATE TABLE TB_CODE_DETAIL (
    group_code VARCHAR(50) NOT NULL REFERENCES TB_CODE_GROUP(group_code),
    detail_code VARCHAR(20) NOT NULL,
    detail_name VARCHAR(200) NOT NULL,
    detail_desc TEXT,
    parent_code VARCHAR(20),
    level_depth INTEGER DEFAULT 1,
    sort_order INTEGER DEFAULT 0,
    ext_attr1 VARCHAR(100),
    ext_attr2 VARCHAR(100),
    ext_attr3 VARCHAR(100),
    extra_data JSONB,
    valid_from TIMESTAMP WITH TIME ZONE,
    valid_until TIMESTAMP WITH TIME ZONE,
    is_active BOOLEAN DEFAULT TRUE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id),
    
    PRIMARY KEY (group_code, detail_code)
);

CREATE INDEX idx_code_detail_sort ON TB_CODE_DETAIL(group_code, sort_order);
CREATE INDEX idx_code_detail_parent ON TB_CODE_DETAIL(parent_code, level_depth);
CREATE INDEX idx_code_detail_period ON TB_CODE_DETAIL(valid_from, valid_until);
```

### 2.3 통합 첨부파일 관리 - 통합
**통합 대상**: TB_ATTACHMENT, tb_attachment, attachment_master, improvement_file, approval_file

```sql
CREATE TABLE TB_ATTACHMENT (
    attachment_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    reference_type VARCHAR(30) NOT NULL,
    reference_id VARCHAR(50) NOT NULL,
    
    -- 파일 정보
    file_name VARCHAR(500) NOT NULL,
    original_file_name VARCHAR(500) NOT NULL,
    stored_file_name VARCHAR(500) NOT NULL,
    file_path VARCHAR(1000) NOT NULL,
    file_size BIGINT NOT NULL,
    file_extension VARCHAR(20) NOT NULL,
    mime_type VARCHAR(100),
    
    -- 분류 및 설명
    file_category VARCHAR(50),
    file_type VARCHAR(30) NOT NULL,
    content_type VARCHAR(30),
    description TEXT,
    file_group VARCHAR(20) DEFAULT 'DEFAULT',
    
    -- 버전 관리
    version VARCHAR(10) DEFAULT '1.0',
    is_latest BOOLEAN DEFAULT TRUE,
    
    -- 접근 제어
    access_level VARCHAR(20) DEFAULT 'DEPARTMENT' 
        CHECK (access_level IN ('PUBLIC', 'DEPARTMENT', 'TEAM', 'PRIVATE')),
    confidentiality_level VARCHAR(20) DEFAULT 'INTERNAL'
        CHECK (confidentiality_level IN ('PUBLIC', 'INTERNAL', 'CONFIDENTIAL', 'SECRET')),
    
    -- 사용 정보
    download_count INTEGER DEFAULT 0,
    last_download_at TIMESTAMP WITH TIME ZONE,
    expiry_date TIMESTAMP WITH TIME ZONE,
    
    -- 보안 검사
    virus_scan_status VARCHAR(20) DEFAULT 'PENDING' 
        CHECK (virus_scan_status IN ('PENDING', 'CLEAN', 'INFECTED')),
    virus_scan_date TIMESTAMP WITH TIME ZONE,
    is_encrypted BOOLEAN DEFAULT FALSE,
    checksum_md5 VARCHAR(32),
    checksum_sha256 VARCHAR(64),
    
    -- 상태
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP WITH TIME ZONE,
    deleted_by UUID REFERENCES TB_USERS(user_id),
    
    -- 메타데이터
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id)
);

CREATE INDEX idx_attachment_reference ON TB_ATTACHMENT(reference_type, reference_id);
CREATE INDEX idx_attachment_type ON TB_ATTACHMENT(file_type, file_category);
CREATE INDEX idx_attachment_latest ON TB_ATTACHMENT(is_latest, version);
CREATE INDEX idx_attachment_virus ON TB_ATTACHMENT(virus_scan_status);
```

### 2.4 통합 이력 관리 - 통합
**통합 대상**: TB_AUDIT_LOG, tb_change_history, common_histories, approval_history

```sql
CREATE TABLE TB_COMMON_HISTORY (
    history_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    
    -- 대상 정보
    table_name VARCHAR(50) NOT NULL,
    target_id VARCHAR(100) NOT NULL,
    reference_type VARCHAR(30),
    
    -- 변경 정보
    action_type VARCHAR(20) NOT NULL 
        CHECK (action_type IN ('INSERT', 'UPDATE', 'DELETE', 'APPROVE', 'REJECT', 'RECALL')),
    changed_fields TEXT[],
    before_data JSONB,
    after_data JSONB,
    
    -- 변경 사유 및 승인
    change_reason TEXT,
    change_impact TEXT,
    business_reason TEXT,
    approval_status VARCHAR(20) DEFAULT 'APPROVED'
        CHECK (approval_status IN ('PENDING', 'APPROVED', 'REJECTED')),
    
    -- 사용자 정보
    user_id UUID REFERENCES TB_USERS(user_id),
    user_name VARCHAR(100),
    session_id VARCHAR(100),
    ip_address INET,
    user_agent TEXT,
    
    -- 메타 정보
    changed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
) PARTITION BY RANGE (changed_at);

-- 월별 파티션 생성
CREATE TABLE TB_COMMON_HISTORY_2025_01 PARTITION OF TB_COMMON_HISTORY
    FOR VALUES FROM ('2025-01-01') TO ('2025-02-01');

CREATE INDEX idx_common_history_table_target ON TB_COMMON_HISTORY(table_name, target_id);
CREATE INDEX idx_common_history_date ON TB_COMMON_HISTORY(changed_at);
CREATE INDEX idx_common_history_user ON TB_COMMON_HISTORY(user_id, changed_at);
```

## 3. 업무별 특화 테이블

### 3.1 원장관리 도메인

#### TB_POSITION (직책 관리)

```sql
CREATE TABLE TB_POSITION (
    position_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    position_code VARCHAR(20) UNIQUE NOT NULL,
    position_name VARCHAR(100) NOT NULL,
    position_name_en VARCHAR(100),
    dept_id UUID REFERENCES TB_DEPARTMENT(dept_id),
    position_level INTEGER DEFAULT 1,
    position_rank VARCHAR(50),
    job_description TEXT,
    required_qualifications TEXT,
    is_executive BOOLEAN DEFAULT FALSE,
    is_board_member BOOLEAN DEFAULT FALSE,
    approval_authority_level INTEGER DEFAULT 0,
    sort_order INTEGER DEFAULT 999,
    is_active BOOLEAN DEFAULT TRUE,
    effective_date DATE DEFAULT CURRENT_DATE,
    expiry_date DATE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id)
);

CREATE INDEX idx_position_code ON TB_POSITION(position_code);
CREATE INDEX idx_position_dept ON TB_POSITION(dept_id);
CREATE INDEX idx_position_executive ON TB_POSITION(is_executive);
```

#### TB_RESPONSIBILITY (책무 관리)

```sql
CREATE TABLE TB_RESPONSIBILITY (
    responsibility_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    responsibility_code VARCHAR(20) UNIQUE NOT NULL,
    responsibility_name VARCHAR(500) NOT NULL,
    responsibility_description TEXT,
    responsibility_type VARCHAR(50) NOT NULL,
    parent_responsibility_id UUID REFERENCES TB_RESPONSIBILITY(responsibility_id),
    responsibility_level INTEGER DEFAULT 1,
    legal_basis TEXT,
    regulation_basis TEXT,
    category VARCHAR(50),
    risk_level VARCHAR(20) CHECK (risk_level IN ('HIGH', 'MEDIUM', 'LOW')),
    monitoring_cycle VARCHAR(50),
    performance_indicators TEXT,
    sort_order INTEGER DEFAULT 999,
    is_active BOOLEAN DEFAULT TRUE,
    effective_date DATE DEFAULT CURRENT_DATE,
    expiry_date DATE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id)
);

CREATE INDEX idx_responsibility_code ON TB_RESPONSIBILITY(responsibility_code);
CREATE INDEX idx_responsibility_parent ON TB_RESPONSIBILITY(parent_responsibility_id);
CREATE INDEX idx_responsibility_active ON TB_RESPONSIBILITY(is_active);
```

#### TB_COMMITTEE (회의체 관리)

```sql
CREATE TABLE TB_COMMITTEE (
    committee_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    committee_code VARCHAR(20) UNIQUE NOT NULL,
    committee_name VARCHAR(200) NOT NULL,
    committee_type VARCHAR(20) DEFAULT 'NORMAL' 
        CHECK (committee_type IN ('BOARD', 'AUDIT', 'RISK', 'NORMAL', 'SPECIAL')),
    chairman_employee_id UUID REFERENCES TB_USERS(user_id),
    meeting_cycle VARCHAR(20) CHECK (meeting_cycle IN ('WEEKLY', 'MONTHLY', 'QUARTERLY', 'HALF_YEARLY', 'YEARLY', 'ON_DEMAND')),
    main_agenda TEXT,
    member_count INTEGER DEFAULT 0,
    establishment_date DATE,
    dissolution_date DATE,
    is_regulatory_required BOOLEAN DEFAULT FALSE,
    governance_type VARCHAR(50),
    sort_order INTEGER DEFAULT 999,
    is_active BOOLEAN DEFAULT TRUE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id)
);

CREATE INDEX idx_committee_code ON TB_COMMITTEE(committee_code);
CREATE INDEX idx_committee_type ON TB_COMMITTEE(committee_type);
CREATE INDEX idx_committee_chairman ON TB_COMMITTEE(chairman_employee_id);
```

### 3.2 관리활동 도메인

#### TB_BUSINESS_AREA (업무영역 마스터)

```sql
CREATE TABLE TB_BUSINESS_AREA (
    area_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    area_code VARCHAR(20) UNIQUE NOT NULL,
    area_name VARCHAR(200) NOT NULL,
    parent_area_id UUID REFERENCES TB_BUSINESS_AREA(area_id),
    area_level INTEGER DEFAULT 1,
    area_type VARCHAR(30),
    area_description TEXT,
    responsible_dept_id UUID REFERENCES TB_DEPARTMENT(dept_id),
    manager_id UUID REFERENCES TB_USERS(user_id),
    sort_order INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id)
);

CREATE INDEX idx_business_area_parent ON TB_BUSINESS_AREA(parent_area_id, area_level);
CREATE INDEX idx_business_area_dept ON TB_BUSINESS_AREA(responsible_dept_id);
```

#### TB_MANAGEMENT_ACTIVITY (관리활동 마스터)

```sql
CREATE TABLE TB_MANAGEMENT_ACTIVITY (
    activity_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    activity_code VARCHAR(50) UNIQUE NOT NULL,
    activity_name VARCHAR(200) NOT NULL,
    activity_description TEXT,
    activity_type VARCHAR(20) NOT NULL,
    business_area_id UUID REFERENCES TB_BUSINESS_AREA(area_id),
    cycle_type VARCHAR(20),
    is_internal BOOLEAN DEFAULT FALSE,
    discipline_level VARCHAR(20),
    general_obligation_code VARCHAR(10),
    sort_order INTEGER DEFAULT 0,
    is_terminated BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id)
);

CREATE INDEX idx_management_activity_type ON TB_MANAGEMENT_ACTIVITY(activity_type, is_active);
CREATE INDEX idx_management_activity_area ON TB_MANAGEMENT_ACTIVITY(business_area_id);
```

#### TB_INTERNAL_CONTROL_DEVICE (내부통제장치)

```sql
CREATE TABLE TB_INTERNAL_CONTROL_DEVICE (
    device_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    device_code VARCHAR(50) UNIQUE NOT NULL,
    business_area_id UUID REFERENCES TB_BUSINESS_AREA(area_id),
    device_name VARCHAR(300) NOT NULL,
    device_description TEXT,
    device_type VARCHAR(30),
    control_level VARCHAR(20),
    control_method VARCHAR(50),
    usage_status TEXT,
    usage_detail TEXT,
    has_external_system BOOLEAN DEFAULT FALSE,
    external_system_name VARCHAR(100),
    interface_url VARCHAR(500),
    interface_method VARCHAR(20),
    has_monitoring BOOLEAN DEFAULT FALSE,
    monitoring_cycle VARCHAR(20),
    responsible_dept_id UUID REFERENCES TB_DEPARTMENT(dept_id),
    responsible_user_id UUID REFERENCES TB_USERS(user_id),
    sort_order INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id)
);

CREATE INDEX idx_control_device_area ON TB_INTERNAL_CONTROL_DEVICE(business_area_id, is_active);
CREATE INDEX idx_control_device_dept ON TB_INTERNAL_CONTROL_DEVICE(responsible_dept_id);
```

### 3.3 이행점검 도메인

#### TB_INSPECTION_PERIOD (이행점검기간)

```sql
CREATE TABLE TB_INSPECTION_PERIOD (
    period_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    period_code VARCHAR(20) UNIQUE NOT NULL,
    period_name VARCHAR(200) NOT NULL,
    period_desc TEXT,
    inspection_start_date DATE NOT NULL,
    inspection_end_date DATE NOT NULL,
    target_start_date DATE NOT NULL,
    target_end_date DATE NOT NULL,
    status_code VARCHAR(10) NOT NULL DEFAULT 'ACTIVE',
    is_active BOOLEAN DEFAULT TRUE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id)
);

CREATE INDEX idx_inspection_period_date ON TB_INSPECTION_PERIOD(inspection_start_date, inspection_end_date);
```

#### TB_INSPECTION_ITEM (점검항목)

```sql
CREATE TABLE TB_INSPECTION_ITEM (
    item_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    period_id UUID REFERENCES TB_INSPECTION_PERIOD(period_id),
    activity_id UUID REFERENCES TB_MANAGEMENT_ACTIVITY(activity_id),
    item_code VARCHAR(20) NOT NULL,
    item_name VARCHAR(200) NOT NULL,
    item_description TEXT,
    inspection_type VARCHAR(20) NOT NULL,
    target_dept_id UUID REFERENCES TB_DEPARTMENT(dept_id),
    inspection_criteria TEXT,
    inspection_method TEXT,
    required_documents TEXT,
    sort_order INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id)
);

CREATE INDEX idx_inspection_item_period ON TB_INSPECTION_ITEM(period_id);
CREATE INDEX idx_inspection_item_activity ON TB_INSPECTION_ITEM(activity_id);
```

### 3.4 점검보고서 도메인

#### TB_INSPECTION_MASTER (점검 마스터)

```sql
CREATE TABLE TB_INSPECTION_MASTER (
    inspection_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    inspection_year INTEGER NOT NULL,
    inspection_name VARCHAR(200) NOT NULL,
    inspection_round INTEGER NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'PLANNING' 
        CHECK (status IN ('PLANNING', 'ONGOING', 'COMPLETED')),
    description TEXT,
    responsible_dept_id UUID REFERENCES TB_DEPARTMENT(dept_id),
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id),
    
    UNIQUE(inspection_year, inspection_round)
);

CREATE INDEX idx_inspection_master_year ON TB_INSPECTION_MASTER(inspection_year);
CREATE INDEX idx_inspection_master_status ON TB_INSPECTION_MASTER(status, start_date);
```

#### TB_REPORT_MASTER (통합 보고서 마스터)

```sql
CREATE TABLE TB_REPORT_MASTER (
    report_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    report_no VARCHAR(30) UNIQUE NOT NULL,
    inspection_id UUID REFERENCES TB_INSPECTION_MASTER(inspection_id),
    report_category VARCHAR(20) NOT NULL 
        CHECK (report_category IN ('EXECUTIVE', 'CEO', 'DEPARTMENT', 'INTEGRATED')),
    report_type VARCHAR(20) NOT NULL,
    report_title VARCHAR(200) NOT NULL,
    
    -- 공통 필드
    department_id UUID REFERENCES TB_DEPARTMENT(dept_id),
    target_executive VARCHAR(50),
    reporting_period_from DATE NOT NULL,
    reporting_period_to DATE NOT NULL,
    
    -- 내용 필드
    report_content TEXT,
    executive_summary TEXT,
    overall_assessment TEXT,
    key_findings TEXT,
    critical_issues TEXT,
    recommendations TEXT,
    risk_assessment TEXT,
    
    -- 결과 필드
    inspection_result VARCHAR(20),
    compliance_status VARCHAR(20),
    overall_rating VARCHAR(20),
    
    -- 상태 관리
    status VARCHAR(20) NOT NULL DEFAULT 'DRAFT' 
        CHECK (status IN ('DRAFT', 'SUBMITTED', 'REVIEWING', 'APPROVED', 'REJECTED', 'COMPLETED')),
    priority_level VARCHAR(20) NOT NULL DEFAULT 'MEDIUM' 
        CHECK (priority_level IN ('HIGH', 'MEDIUM', 'LOW')),
    
    -- 일자 관리
    submit_date DATE,
    approval_date DATE,
    completion_date DATE,
    due_date DATE,
    
    -- 사용자 관리
    creator_id UUID REFERENCES TB_USERS(user_id),
    submit_user_id UUID REFERENCES TB_USERS(user_id),
    approver_id UUID REFERENCES TB_USERS(user_id),
    final_approver_id UUID REFERENCES TB_USERS(user_id),
    final_approval_date DATE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id)
);

CREATE INDEX idx_report_master_inspection ON TB_REPORT_MASTER(inspection_id);
CREATE INDEX idx_report_master_category ON TB_REPORT_MASTER(report_category, report_type);
CREATE INDEX idx_report_master_status ON TB_REPORT_MASTER(status, submit_date);
```

### 3.5 개선이행 도메인

#### TB_IMPROVEMENT_IMPLEMENTATION (개선이행마스터)

```sql
CREATE TABLE TB_IMPROVEMENT_IMPLEMENTATION (
    implementation_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    implementation_no VARCHAR(30) UNIQUE NOT NULL,
    source_type VARCHAR(20) NOT NULL 
        CHECK (source_type IN ('MGMT_ACTIVITY', 'IMPL_INSPECTION', 'REPORT_QUALITY')),
    source_id UUID NOT NULL,
    
    -- 공통 기본정보
    inadequate_content TEXT NOT NULL,
    category VARCHAR(50) NOT NULL,
    activity_name VARCHAR(200) NOT NULL,
    round_no INTEGER NOT NULL DEFAULT 1,
    
    -- 부서 정보
    department_id UUID REFERENCES TB_DEPARTMENT(dept_id),
    report_id UUID REFERENCES TB_REPORT_MASTER(report_id),
    
    -- 우선순위 및 심각도
    priority_level VARCHAR(20) NOT NULL DEFAULT 'MEDIUM' 
        CHECK (priority_level IN ('URGENT', 'HIGH', 'MEDIUM', 'LOW')),
    severity_level VARCHAR(20) NOT NULL 
        CHECK (severity_level IN ('CRITICAL', 'HIGH', 'MEDIUM', 'LOW')),
    
    -- 담당정보
    responsible_dept_id UUID REFERENCES TB_DEPARTMENT(dept_id),
    responsible_person_id UUID REFERENCES TB_USERS(user_id),
    
    -- 일정관리
    target_completion_date TIMESTAMP WITH TIME ZONE,
    actual_completion_date TIMESTAMP WITH TIME ZONE,
    
    -- 진행상태
    status VARCHAR(20) NOT NULL DEFAULT 'REQUESTED' 
        CHECK (status IN ('IDENTIFIED', 'REQUESTED', 'PLANNING', 'APPROVED', 'IN_PROGRESS', 'COMPLETED', 'VERIFIED', 'CLOSED')),
    progress_rate INTEGER NOT NULL DEFAULT 0 CHECK (progress_rate >= 0 AND progress_rate <= 100),
    
    -- 품질정보
    quality_score_before NUMERIC(5,2),
    quality_grade_before VARCHAR(20),
    quality_score_after NUMERIC(5,2),
    quality_grade_after VARCHAR(20),
    improvement_effectiveness VARCHAR(20),
    
    -- 부가정보
    budget_requirement NUMERIC(15,2),
    training_required BOOLEAN DEFAULT FALSE,
    guideline_update_required BOOLEAN DEFAULT FALSE,
    auto_created BOOLEAN DEFAULT TRUE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id)
);

CREATE INDEX idx_improvement_impl_source ON TB_IMPROVEMENT_IMPLEMENTATION(source_type, source_id);
CREATE INDEX idx_improvement_impl_status ON TB_IMPROVEMENT_IMPLEMENTATION(status, priority_level);
CREATE INDEX idx_improvement_impl_dept ON TB_IMPROVEMENT_IMPLEMENTATION(responsible_dept_id, status);
```

### 3.6 통합 결재 시스템 - 통합
**통합 대상**: approval_lines, report_approval, approval_master, approval_line

#### TB_APPROVAL_MASTER (결재함 마스터)

```sql
CREATE TABLE TB_APPROVAL_MASTER (
    approval_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    approval_no VARCHAR(30) UNIQUE NOT NULL,
    work_type VARCHAR(20) NOT NULL 
        CHECK (work_type IN ('COMMITTEE', 'STRUCTURE', 'CONTROL', 'EXPENSE', 'CONTRACT', 'HR', 'REPORT', 'IMPROVEMENT')),
    reference_type VARCHAR(30),
    reference_id UUID,
    
    title VARCHAR(200) NOT NULL,
    content TEXT,
    approval_status VARCHAR(20) NOT NULL DEFAULT 'DRAFT' 
        CHECK (approval_status IN ('DRAFT', 'PROGRESS', 'COMPLETE', 'RECALL', 'REJECT')),
    
    dept_id UUID REFERENCES TB_DEPARTMENT(dept_id),
    drafter_id UUID NOT NULL REFERENCES TB_USERS(user_id),
    draft_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    request_date TIMESTAMP WITH TIME ZONE,
    complete_date TIMESTAMP WITH TIME ZONE,
    
    current_approver_id UUID REFERENCES TB_USERS(user_id),
    current_step INTEGER DEFAULT 0,
    total_step INTEGER DEFAULT 0,
    
    priority VARCHAR(20) DEFAULT 'M' CHECK (priority IN ('H', 'M', 'L')),
    due_date TIMESTAMP WITH TIME ZONE,
    emergency BOOLEAN DEFAULT FALSE,
    confidential BOOLEAN DEFAULT FALSE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id)
);

CREATE INDEX idx_approval_master_status ON TB_APPROVAL_MASTER(approval_status, draft_date DESC);
CREATE INDEX idx_approval_master_drafter ON TB_APPROVAL_MASTER(drafter_id, draft_date DESC);
CREATE INDEX idx_approval_master_current ON TB_APPROVAL_MASTER(current_approver_id, approval_status);
```

#### TB_APPROVAL_LINE (결재선 정보)

```sql
CREATE TABLE TB_APPROVAL_LINE (
    approval_id UUID NOT NULL REFERENCES TB_APPROVAL_MASTER(approval_id),
    line_seq INTEGER NOT NULL,
    step_name VARCHAR(100) NOT NULL,
    step_type VARCHAR(20) NOT NULL CHECK (step_type IN ('DRAFT', 'APPROVAL', 'REFER')),
    approver_id UUID NOT NULL REFERENCES TB_USERS(user_id),
    dept_id UUID REFERENCES TB_DEPARTMENT(dept_id),
    position_name VARCHAR(50),
    approval_status VARCHAR(20) DEFAULT 'WAIT' 
        CHECK (approval_status IN ('WAIT', 'APPROVE', 'REJECT', 'SKIP')),
    approval_date TIMESTAMP WITH TIME ZONE,
    opinion TEXT,
    is_current BOOLEAN DEFAULT FALSE,
    is_required BOOLEAN DEFAULT TRUE,
    delegation_from_id UUID REFERENCES TB_USERS(user_id),
    delegation_reason VARCHAR(200),
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id),
    
    PRIMARY KEY (approval_id, line_seq)
);

CREATE INDEX idx_approval_line_approver ON TB_APPROVAL_LINE(approver_id, approval_status);
CREATE INDEX idx_approval_line_current ON TB_APPROVAL_LINE(approval_id, is_current);
```

## 4. 매핑 및 관계 테이블

### 4.1 TB_POSITION_RESPONSIBILITY_MAP (직책-책무 매핑)

```sql
CREATE TABLE TB_POSITION_RESPONSIBILITY_MAP (
    map_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    position_id UUID NOT NULL REFERENCES TB_POSITION(position_id),
    responsibility_id UUID NOT NULL REFERENCES TB_RESPONSIBILITY(responsibility_id),
    mapping_type VARCHAR(20) DEFAULT 'DIRECT' CHECK (mapping_type IN ('DIRECT', 'INDIRECT')),
    effective_date DATE DEFAULT CURRENT_DATE,
    expiry_date DATE,
    priority_order INTEGER DEFAULT 999,
    is_active BOOLEAN DEFAULT TRUE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id),
    
    UNIQUE(position_id, responsibility_id, is_active)
);

CREATE INDEX idx_pos_resp_map_position ON TB_POSITION_RESPONSIBILITY_MAP(position_id);
CREATE INDEX idx_pos_resp_map_responsibility ON TB_POSITION_RESPONSIBILITY_MAP(responsibility_id);
```

### 4.2 TB_ACTIVITY_DEVICE_MAPPING (관리활동-통제장치 매핑)

```sql
CREATE TABLE TB_ACTIVITY_DEVICE_MAPPING (
    map_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    activity_id UUID NOT NULL REFERENCES TB_MANAGEMENT_ACTIVITY(activity_id),
    device_id UUID NOT NULL REFERENCES TB_INTERNAL_CONTROL_DEVICE(device_id),
    relation_type VARCHAR(20) DEFAULT 'PRIMARY' 
        CHECK (relation_type IN ('PRIMARY', 'SECONDARY', 'SUPPORT')),
    priority INTEGER DEFAULT 0,
    effectiveness VARCHAR(20),
    frequency VARCHAR(20),
    mapping_description VARCHAR(500),
    is_active BOOLEAN DEFAULT TRUE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id),
    
    UNIQUE(activity_id, device_id)
);

CREATE INDEX idx_activity_device_map_activity ON TB_ACTIVITY_DEVICE_MAPPING(activity_id);
CREATE INDEX idx_activity_device_map_device ON TB_ACTIVITY_DEVICE_MAPPING(device_id);
```

## 5. 시스템 관리 테이블

### 5.1 TB_MENU (메뉴 관리)

```sql
CREATE TABLE TB_MENU (
    menu_id VARCHAR(20) PRIMARY KEY,
    menu_name VARCHAR(200) NOT NULL,
    menu_desc TEXT,
    menu_url VARCHAR(500),
    menu_params JSONB,
    parent_menu_id VARCHAR(20) REFERENCES TB_MENU(menu_id),
    menu_level INTEGER NOT NULL DEFAULT 1,
    sort_order INTEGER NOT NULL DEFAULT 0,
    menu_type VARCHAR(20) DEFAULT 'PAGE' 
        CHECK (menu_type IN ('FOLDER', 'PAGE', 'LINK')),
    icon_class VARCHAR(100),
    auth_required BOOLEAN DEFAULT TRUE,
    is_active BOOLEAN DEFAULT TRUE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by UUID REFERENCES TB_USERS(user_id),
    updated_by UUID REFERENCES TB_USERS(user_id)
);

CREATE INDEX idx_menu_hierarchy ON TB_MENU(parent_menu_id, menu_level, sort_order);
CREATE INDEX idx_menu_active ON TB_MENU(is_active, auth_required);
```

### 5.2 TB_USER_SESSION (사용자 세션)

```sql
CREATE TABLE TB_USER_SESSION (
    session_id VARCHAR(50) PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES TB_USERS(user_id),
    login_datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    last_access_datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    session_status VARCHAR(20) DEFAULT 'ACTIVE' 
        CHECK (session_status IN ('ACTIVE', 'EXPIRED', 'TERMINATED')),
    login_ip INET,
    user_agent TEXT,
    device_type VARCHAR(20),
    current_menu_id VARCHAR(20) REFERENCES TB_MENU(menu_id),
    session_data JSONB,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_user_session_user ON TB_USER_SESSION(user_id, session_status);
CREATE INDEX idx_user_session_expire ON TB_USER_SESSION(expires_at, session_status);
```

### 5.3 TB_ACCESS_LOG (접근 로그) - 파티션 테이블

```sql
CREATE TABLE TB_ACCESS_LOG (
    log_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    target_type VARCHAR(20) NOT NULL 
        CHECK (target_type IN ('MENU', 'API', 'RESOURCE')),
    target_id VARCHAR(50),
    target_name VARCHAR(500),
    target_url VARCHAR(500),
    user_id UUID REFERENCES TB_USERS(user_id),
    session_id VARCHAR(50),
    access_datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    access_date DATE GENERATED ALWAYS AS (access_datetime::DATE) STORED,
    access_ip INET,
    user_agent TEXT,
    request_method VARCHAR(10),
    request_params JSONB,
    response_code VARCHAR(10),
    response_time INTEGER,
    access_result VARCHAR(20) DEFAULT 'SUCCESS' 
        CHECK (access_result IN ('SUCCESS', 'DENIED', 'ERROR')),
    error_code VARCHAR(20),
    error_message TEXT
) PARTITION BY RANGE (access_date);

-- 월별 파티션 생성
CREATE TABLE TB_ACCESS_LOG_2025_01 PARTITION OF TB_ACCESS_LOG
    FOR VALUES FROM ('2025-01-01') TO ('2025-02-01');

CREATE INDEX idx_access_log_user_date ON TB_ACCESS_LOG(user_id, access_date);
CREATE INDEX idx_access_log_target ON TB_ACCESS_LOG(target_type, target_id, access_date);
```

## 6. 제약조건 및 규칙

### 6.1 도메인 제약조건

```sql
-- 이메일 도메인
CREATE DOMAIN email_type AS VARCHAR(100)
    CHECK (VALUE ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$');

-- 전화번호 도메인
CREATE DOMAIN phone_type AS VARCHAR(20)
    CHECK (VALUE ~ '^[0-9-+().\s]+$');

-- 비즈니스 규칙 제약조건
ALTER TABLE TB_USERS ADD CONSTRAINT chk_users_hire_retire 
    CHECK (resignation_date IS NULL OR resignation_date >= hire_date);

ALTER TABLE TB_USERS ADD CONSTRAINT chk_users_password_change
    CHECK (password_last_changed_at IS NULL OR password_last_changed_at <= CURRENT_TIMESTAMP);

ALTER TABLE TB_ATTACHMENT ADD CONSTRAINT chk_attachment_file_size 
    CHECK (file_size > 0);

ALTER TABLE TB_APPROVAL_MASTER ADD CONSTRAINT chk_approval_dates 
    CHECK ((request_date IS NULL OR request_date >= draft_date) AND
           (complete_date IS NULL OR complete_date >= draft_date));
```

## 7. 트리거 및 함수

### 7.1 업데이트 시간 자동 갱신

```sql
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 모든 테이블에 적용
CREATE TRIGGER trigger_update_updated_at 
    BEFORE UPDATE ON TB_USERS
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- 다른 테이블들도 동일하게 적용
```

### 7.2 이력 자동 생성

```sql
CREATE OR REPLACE FUNCTION log_table_changes()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO TB_COMMON_HISTORY (table_name, target_id, action_type, after_data, user_id)
        VALUES (TG_TABLE_NAME, NEW.id::text, 'INSERT', to_jsonb(NEW), NEW.created_by);
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO TB_COMMON_HISTORY (table_name, target_id, action_type, before_data, after_data, user_id)
        VALUES (TG_TABLE_NAME, NEW.id::text, 'UPDATE', to_jsonb(OLD), to_jsonb(NEW), NEW.updated_by);
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        INSERT INTO TB_COMMON_HISTORY (table_name, target_id, action_type, before_data, user_id)
        VALUES (TG_TABLE_NAME, OLD.id::text, 'DELETE', to_jsonb(OLD), OLD.updated_by);
        RETURN OLD;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;
```

## 8. 성능 최적화

### 8.1 인덱스 전략

```sql
-- 복합 인덱스 (자주 함께 조회되는 컬럼들)
CREATE INDEX idx_users_dept_status_active ON TB_USERS(dept_id, employment_status, account_status) 
    WHERE employment_status = 'ACTIVE';

CREATE INDEX idx_attachment_reference_type ON TB_ATTACHMENT(reference_type, reference_id, is_deleted) 
    WHERE is_deleted = FALSE;

-- 부분 인덱스 (조건부)
CREATE INDEX idx_users_active_email ON TB_USERS(email) 
    WHERE employment_status = 'ACTIVE' AND email IS NOT NULL;

-- JSON 인덱스
CREATE INDEX idx_code_detail_extra_data ON TB_CODE_DETAIL USING GIN (extra_data);
CREATE INDEX idx_common_history_before_data ON TB_COMMON_HISTORY USING GIN (before_data);
CREATE INDEX idx_common_history_after_data ON TB_COMMON_HISTORY USING GIN (after_data);
```

### 8.2 파티셔닝 전략

```sql
-- 월별 파티션 자동 생성 함수
CREATE OR REPLACE FUNCTION create_monthly_partition(
    table_name TEXT,
    partition_date DATE
) RETURNS VOID AS $$
DECLARE
    partition_name TEXT;
    start_date DATE;
    end_date DATE;
BEGIN
    start_date := date_trunc('month', partition_date);
    end_date := start_date + INTERVAL '1 month';
    partition_name := table_name || '_' || to_char(start_date, 'YYYY_MM');
    
    EXECUTE format('CREATE TABLE IF NOT EXISTS %I PARTITION OF %I 
                    FOR VALUES FROM (%L) TO (%L)',
                   partition_name, table_name, start_date, end_date);
END;
$$ LANGUAGE plpgsql;
```

## 9. 초기 데이터

### 9.1 기본 사용자 및 부서

```sql
-- 시스템 관리자 계정
INSERT INTO TB_USERS (user_id, username, employee_no, full_name, email, employment_status, is_admin) 
VALUES 
(gen_random_uuid(), 'admin', 'ADMIN001', '시스템관리자', 'admin@company.com', 'ACTIVE', true),
(gen_random_uuid(), 'system', 'SYS001', '시스템', 'system@company.com', 'ACTIVE', true);

-- 기본 부서
INSERT INTO TB_DEPARTMENT (dept_id, dept_code, dept_name, dept_type, dept_level) 
VALUES 
(gen_random_uuid(), 'HQ', '본사', 'HQ', 1),
(gen_random_uuid(), 'BOD', '이사회', 'DEPT', 2),
(gen_random_uuid(), 'CEO', '대표이사', 'DEPT', 2);
```

### 9.2 기본 공통코드

```sql
-- 코드 분류
INSERT INTO TB_CODE_CATEGORY VALUES 
('SYSTEM', '시스템', '시스템 관련 코드', 'SYSTEM', 1, true),
('BUSINESS', '업무', '업무 관련 코드', 'BUSINESS', 2, true),
('COMMON', '공통', '공통 코드', 'COMMON', 3, true);

-- 코드 그룹
INSERT INTO TB_CODE_GROUP VALUES 
('EMPLOYMENT_STATUS', '재직상태', '사용자 재직 상태', 'SYSTEM', true, true, 1, true),
('PRIORITY_LEVEL', '우선순위', '업무 우선순위', 'BUSINESS', false, true, 2, true),
('APPROVAL_STATUS', '결재상태', '결재 진행 상태', 'BUSINESS', false, true, 3, true);

-- 상세 코드
INSERT INTO TB_CODE_DETAIL VALUES 
('EMPLOYMENT_STATUS', 'ACTIVE', '재직', '재직중', null, 1, 1, null, null, null, null, null, null, true),
('EMPLOYMENT_STATUS', 'INACTIVE', '휴직', '휴직중', null, 1, 2, null, null, null, null, null, null, true),
('EMPLOYMENT_STATUS', 'RESIGNED', '퇴직', '퇴직', null, 1, 3, null, null, null, null, null, null, true),
('PRIORITY_LEVEL', 'HIGH', '높음', '높은 우선순위', null, 1, 1, null, null, null, null, null, null, true),
('PRIORITY_LEVEL', 'MEDIUM', '보통', '보통 우선순위', null, 1, 2, null, null, null, null, null, null, true),
('PRIORITY_LEVEL', 'LOW', '낮음', '낮은 우선순위', null, 1, 3, null, null, null, null, null, null, true);
```

## 10. 백업 및 유지보수

### 10.1 아카이브 정책

```sql
-- 완료된 결재 아카이브 (1년 후)
CREATE TABLE TB_APPROVAL_MASTER_ARCHIVE (
    LIKE TB_APPROVAL_MASTER INCLUDING ALL
);

-- 이력 데이터 아카이브 (3년 후)
CREATE TABLE TB_COMMON_HISTORY_ARCHIVE (
    LIKE TB_COMMON_HISTORY INCLUDING ALL
);

-- 아카이브 이동 함수
CREATE OR REPLACE FUNCTION archive_old_data(cutoff_date DATE)
RETURNS TABLE(table_name TEXT, moved_count INTEGER) AS $$
BEGIN
    -- 결재 아카이브
    WITH moved_approvals AS (
        DELETE FROM TB_APPROVAL_MASTER
        WHERE approval_status = 'COMPLETE' AND complete_date < cutoff_date
        RETURNING *
    )
    INSERT INTO TB_APPROVAL_MASTER_ARCHIVE SELECT * FROM moved_approvals;
    
    GET DIAGNOSTICS moved_count = ROW_COUNT;
    RETURN QUERY SELECT 'TB_APPROVAL_MASTER'::TEXT, moved_count;
    
    -- 이력 아카이브 (3년 전 데이터)
    WITH moved_history AS (
        DELETE FROM TB_COMMON_HISTORY
        WHERE changed_at < (cutoff_date - INTERVAL '2 years')
        RETURNING *
    )
    INSERT INTO TB_COMMON_HISTORY_ARCHIVE SELECT * FROM moved_history;
    
    GET DIAGNOSTICS moved_count = ROW_COUNT;
    RETURN QUERY SELECT 'TB_COMMON_HISTORY'::TEXT, moved_count;
END;
$$ LANGUAGE plpgsql;
```

## 11. 통합 결과 요약

### 11.1 중복 제거 성과

| 구분 | 통합 전 | 통합 후 | 제거율 |
|------|---------|---------|---------|
| **사용자 관리** | 4개 테이블 | 1개 테이블 | 75% |
| **공통코드** | 5개 테이블 | 3개 테이블 | 40% |
| **첨부파일** | 6개 테이블 | 1개 테이블 | 83% |
| **이력관리** | 4개 테이블 | 1개 테이블 | 75% |
| **결재시스템** | 5개 테이블 | 2개 테이블 | 60% |
| **전체** | 89개 테이블 | 35개 테이블 | **61%** |

### 11.2 주요 개선사항

1. **표준화 완료**
   - 일관된 네이밍 컨벤션 (snake_case)
   - PostgreSQL 네이티브 타입 적용
   - 공통 컬럼 표준화

2. **성능 최적화**
   - 파티셔닝을 통한 대용량 데이터 처리
   - 적절한 인덱스 전략 수립
   - JSONB를 활용한 유연한 데이터 구조

3. **확장성 향상**
   - UUID 기반 PK 설계
   - 모듈간 느슨한 결합
   - 비즈니스 규칙의 데이터베이스 레벨 적용

4. **유지보수성 개선**
   - 중복 코드 제거
   - 일관된 테이블 구조
   - 체계적인 이력 관리

### 11.3 마이그레이션 가이드

1. **데이터 마이그레이션 순서**
   ```sql
   -- 1. 공통 테이블 (사용자, 부서, 코드)
   -- 2. 업무별 마스터 테이블
   -- 3. 매핑 및 관계 테이블
   -- 4. 이력 및 로그 테이블
   ```

2. **데이터 검증**
   ```sql
   -- 중복 데이터 체크
   -- 참조 무결성 검증
   -- 비즈니스 규칙 검증
   ```

3. **성능 테스트**
   - 대용량 데이터 조회 테스트
   - 동시 접속 부하 테스트
   - 파티션 성능 검증

이 통합 설계서는 책무구조도 이행관리시스템의 모든 요구사항을 충족하면서도 확장 가능하고 유지보수가 용이한 데이터베이스 구조를 제공합니다.